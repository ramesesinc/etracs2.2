<workunit>
    <invokers>
        <!--
        <invoker folderid="/explorer/txnmgmt/landtax/auction" action="initNOD" caption="Notice of Delinquency" target="window"  role="LANDTAX" permission="rptauctionmgt.viewNOD" index="1" />
        <invoker folderid="/explorer/txnmgmt/landtax/auction" action="initST" caption="Second Tracer" target="window"  role="LANDTAX" permission="rptauctionmgt.view" index="2" />
        
        <invoker type="formActions" action="create" caption="New"  mnemonic="n" icon="images/doc-new.png"  />        
        <invoker type="formActions" action="open" caption="Open"  mnemonic="v" icon="images/open.png"  visibleWhen="#{showOpen==true}"/>        
        <invoker type="formActions" action="supersede" caption="Supersede"  mnemonic="s"  visibleWhen="#{showSupersede==true}" /> 
        <invoker type="formActions" action="receive" caption="Receive"  mnemonic="r"  visibleWhen="#{showReceive==true}" /> 
        
        <invoker type="previewActions"  action="_default" caption="Back" icon="images/back.png" immediate="true" />
        -->
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;

class RPTAuctionListMgmtController
{
    
    @Service("RPTAuctionService")
    def svc
    
    @Service( 'ReportParameterService')
    def paramSvc

    def searchText;
    
    def doctype
    def selectedItem
    def list 
    def doctypelist
    def params = [:]
    def statuslist = ["DRAFT","OPEN", "EXPIRED","CLOSED"]
    
    
    public void init() {
        doctypelist = svc.getDoctypes()
        getDelinquencyList()
    }
    
    def search() {
        params.searchText =  searchText;
        params.doctype = null;
        params.searchtype = "bysearchtext"
        getDelinquencyList()
    }
    
    public void setDoctype( doctype) {
        this.doctype = doctype;
         
        params.doctype = doctype?.code;
        params.searchText =  null 
        params.searchtype = "bydoctype"
        getDelinquencyList()
    }
    
    void getDelinquencyList() {
        list = svc.getList( params ) ;
        listHandler.load() 
    }
    
    
    def listHandler =[
        getRows    : { return 25 },
        getColumns : { return [
            new Column( name:'doctypedesc', caption:'Doc Type', maxWidth:350),
            new Column( name:'docstate', caption:'Status' ),
            new Column( name:'tdno', caption:'TD No' ),
            new Column( name:'taxpayername', caption:'Taxpayer'),
            new Column( name:'taxpayeraddress', caption:'Taxpayer Address'),
            new Column( name:'pin', caption:'Pin'),
            new Column( name:'rputype', caption:'RPU Type'),
            new Column( name:'classcode', caption:'Classfication'),
            new Column( name:'assessedvalue', caption:'Assessed Value', type:'decimal' ),
            new Column( name:'delinquentamount', caption:'Delinquent Amount', type:'decimal' ),
            new Column( name:'currentamount', caption:'Current Amount', type:'decimal' ),
            new Column( name:'total', caption:'Total', type:'decimal'),
            new Column( name:'receivedby', caption:'Received By'),
            new Column( name:'receiveddate', caption:'Received Date'),
        ]},
        fetchList  : {
            return list
        }
    ] as PageListModel
    
    List getDoctypelist(){
        return doctypelist
    }
    
    def create(){
        return InvokerUtil.lookupOpener('rptauction.create', [:])
    }
    
    def supersede() {
        if(! selectedItem) return;
        if(! selectedItem.receivedby ) throw new Exception("Demand letter for tdno '${selectedItem.tdno} has not been delivered. ");
        svc.checkDocExpired( selectedItem )
        
        def nextdoc = getNextDocumentType(selectedItem);
        if(!nextdoc) throw new Exception("No more succeeding document.   " );
        
        return InvokerUtil.lookupOpener('rptauction:' + nextdoc.code.toLowerCase(), [objid:selectedItem.objid, document:nextdoc])
        
    }
    
    def open() {
        return InvokerUtil.lookupOpener('rptauction_open:' + selectedItem.doctype.toLowerCase(), [entity:selectedItem])
    }
    
    def receive() {
        return InvokerUtil.lookupOpener('rptauction:receive', [entity: selectedItem])
    }
    
    
    def getNextDocumentType(item){
        def i = getIndexOnList(item.doctype,  doctypelist)
        def nextDoc = null;
        while(i <= doctypelist.size() ) {
            ++i
            nextDoc = findInList( i,  doctypelist)
            if(nextDoc ) break;
        }
        return nextDoc
    }
    

    def getIndexOnList( code, list) { 
        for(o in list ) {
            if( o.code == code) return o.index
        }
        return 0
    }

    def findInList(index, list) {
        for(o in list) {
            if( o.index == index ) return o
        }
        return null
    }
    
    boolean getShowOpen() {
         if(selectedItem && selectedItem.receivedby && selectedItem.docstate=='OPEN') return true
         
        return false
    }
    
    boolean getShowSupersede() {
        if(selectedItem && selectedItem.receivedby && selectedItem.docstate=='OPEN' && selectedItem.doctype != 'CSDRP') return true
        
        return false
    }
    
     boolean getShowReceive() {
        if(selectedItem && !selectedItem.receivedby && selectedItem.docstate=='DRAFT') return true
        
        return false
    }
    
     boolean getShowRelease() {
        if(selectedItem && !selectedItem.receivedby && selectedItem.docstate=='OPEN' && selectedItem.doctype.matches('NOR|CSDRP')) return true
        
        return false
    }
}
]]>        
        
    </code>
    <pages>
        <page template="etracs2.rpt.report.rptauction.ListMgmtPage" />
        <page name="preview" template="etracs2.common.PreviewPage" />
    </pages>
</workunit>

