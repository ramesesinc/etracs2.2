<workunit>
    <invokers>
        <invoker type="rptdelinquency.create" action="init" caption="Geneate Notice of RPT Delinquencies" target="window"/>
         <invoker type="rptdelinquency_open:nod" action="open" caption="Notice of Delinquency" target="window"/>
        
        <invoker type="formActions" action="_close" caption="Cancel"  mnemonic="c" immediate="true" icon="images/cancel.png" />        
        <invoker type="formActions" action="save" caption="Save"  mnemonic="s"  icon="images/save.png" visibleWhen="#{mode == 'list'}" /> 
        <invoker type="formActions" action="viewListReport" caption="View Listing Report"  mnemonic="v"  icon="images/doc-view.png" visibleWhen="#{mode == 'saved'}" /> 
        <invoker type="formActions" action="printAll" caption="Print All"  mnemonic="p"  icon="images/doc-view.png" visibleWhen="#{mode == 'saved'}" /> 
        <invoker type="formActions" action="preview" caption="Preview "  mnemonic="n"   visibleWhen="#{mode=='opened'}" icon="images/doc-view.png"/> 
        
        <invoker type="previewActions"  action="back" caption="Back" icon="images/back.png" immediate="true" />
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.annotations.*
import com.rameses.rcp.common.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.reports.*;
import com.rameses.rcp.framework.TaskManager;

class RPTDelinquencyController
{
    @Binding
    def binding
    
    def entity = [:]
    def filter
    def list = []
    def msg
    def taskmgr
    def mode = 'init'
    def barangay
    
    @Service( 'ReportParameterService')
    def paramSvc
    
    @Service('RPTDelinquencyService')
    def svc 
    
    @Service('LguService')
    def lguSvc
    
    @Service( 'RPTLedgerService' )
    def rptledgerSvc 
    
    void init() {
        taskmgr = new TaskManager()
        list = []
        mode = 'init'
    }
    
    def barangaylist 
    List getBarangaylist() {
        if( !barangaylist) barangaylist = lguSvc.getBarangays()
        
        return barangaylist
    }
    
    List getFilterlist(){
        return [
            [ code: 'NOY', caption:'No. of Years'],
            [ code: 'AR', caption:'By Amount'],
        ]
    }
    

    def updateMessage = { msg ->
        this.msg = msg
        binding.refresh('msg')
    }
    
    def onfinish = {
        if( list ) {
            this.mode = "list"
            listHandler.load()
            binding.fireNavigation('list')
        }
        else {
            this.mode = 'init'
            binding.refresh()
            MsgBox.alert('No records found.')
        }
    }
    
    
    void next(){
        mode = 'generating'
        list = []
        entity.filter = filter?.code 
        entity.barangay = barangay.name
        taskmgr.addTask( new DelinquencyTask( list:list, svc:svc, entity:entity, rptledgerSvc:rptledgerSvc , updateMessage:updateMessage, onfinish:onfinish ) );
        taskmgr.start()
    }
    
    @Close
    public boolean closeForm() {
        if( mode == 'list' && !MsgBox.confirm('Discard changes?')) {
            return false
        }
        return true
    }
    
    def save() { 
         if( ! MsgBox.confirm( "Save delinquencies ?")) return;
    
        if( list.size() == list.findAll{it.selected == false}.size() )
            throw new Exception("Please select(s) the rpt delinquencies to be saved. " )
            
        list = list.findAll{ it.selected == true }    
        svc.save( list );    
        mode = 'saved'
        listHandler.load()
        MsgBox.alert("Successfully saved. ")
    }
    
    def viewListReport() {
        
    }
    
    def printAll() {
    
    }
    
    def open() {
        entity = svc.open( entity.objid )
        mode='opened'
        return "info"
    }
    
    def preview() {
        report.viewReport()
        return "preview";
    }
    
    def back() {
        if(mode == 'opened') return 'info';
        return null;
    }
    
    void selectAll(){
        list.each{ it.selected = true }
        listHandler.load()
    }
    
    void deselectAll() {
        list.each{ it.selected = false }
        listHandler.load()
    }

   
    def getColumns(){
        return [
            new Column( name:'selected', caption:'', type:'boolean', editable:"#{mode=='list'}", maxWidth:30, ),
            new Column( name:'doctypedesc', caption:'Doc Type', maxWidth:350),
            new Column( name:'tdno', caption:'tdno' ),
            new Column( name:'taxpayername', caption:'Taxpayer'),
            new Column( name:'taxpayeraddress', caption:'Taxpayer Address'),
            new Column( name:'assessedvalue', caption:'Assessed Value', type:'decimal' ),
            new Column( name:'delinquentamount', caption:'Delinquent Amount', type:'decimal' ),
            new Column( name:'currentamount', caption:'Current Amount', type:'decimal' ),
            new Column( name:'total', caption:'Total', type:'decimal'), 
        ]
    }
    
    def listHandler = [
        getRows    : { return 25 },
        getColumns : { getColumns() },
        fetchList  : {
            def slist = list.findAll{ it.selected == true } 
            return ( mode == 'read' ? slist : list )
        }
    ] as PageListModel
    
    def report = [
        getReportName : { return 'demandletters/noticeofdelinquency' }, 
        getReportData : { return entity },
        getParameters : {
            return paramSvc.getStandardParameter( OsirisContext.env.USERNAME )
        }
    ]  as ServerReportModel
    
}


 class DelinquencyTask extends com.rameses.rcp.common.Task {
        def list
        def svc 
        def rptledgerSvc
        def ended = false
        def cancelled = false 
        def entity

        def updateMessage   //handler
        def onfinish        //handler 

        public boolean accept() {
           return !ended
        }

        public boolean isEnded() {
            return ended
        }

        public void execute() {
            updateMessage('Searching delinquent ledgers...')
            def ledgerlist = svc.getDelinquentLedger( entity )

            for( ledger in ledgerlist) {
                try {
                    updateMessage( 'Please wait while processing Ledger ' + ledger.tdno + '.')            
                    if( entity.filter == 'NOY' && ledger.yearsdelinquent < entity.value) continue;
                    
                    def billing = createBillInfo( ledger )
                    def delinquency = rptledgerSvc.generateNoticeOfDelinquency( billing )
                    if( delinquency ) {
                        if( entity.filter == 'AR' && delinquency.delinquentamount < entity.value) continue;
                        delinquency.selected = true;
                        delinquency.doctype = 'NOD'
                        delinquency.doctypedesc = 'Notice OF Delinquency'
                        list.add( delinquency ) 
                    }
                    try { Thread.sleep( 50 ) } catch( e ) { }                    
                }
                catch( ex ) {
                    println '-'*50 
                    ex.printStackTrace()
                }
            }
            ended = true 
            updateMessage('')
            onfinish()
        }

        Map createBillInfo( ledger ) {
            return [
                taxpayerid     : ledger.taxpayerid,
                taxpayername   : ledger.taxpayername,
                taxpayeraddress: ledger.taxpayeraddress, 
                ledgerids      : [ledger.objid],
                advancepayment : false,
                billdate       : null,
                billtoyear     : null,
                billtoqtr      : 4,
                fullpayment    : true,
                qtrlypaymentavailed : false, 
                advancepayment : false,
                items          : []
            ]
        }
    }

]]>
    </code>
    <pages>
        <page template="etracs2.rpt.report.rptdelinquency.RPTDelinquencyPage"/>
        <page name="info" template="etracs2.rpt.report.rptdelinquency.DemandLetterPage"/>
        <page name = "list" template="etracs2.rpt.report.rptdelinquency.RPTDelinquenctyListPage" />
        <page name="preview" template="etracs2.common.PreviewPage" />
    </pages>
</workunit>