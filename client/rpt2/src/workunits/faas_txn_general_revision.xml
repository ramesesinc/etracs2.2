<?xml version="1.0" encoding="UTF-8"?>
<workunit extends="workunits/faas.xml">
    <invokers>
        <invoker folderid="/explorer/txn/rpt/faas"      action="generalRevision"  caption="General Revision" mnemonic="t" target="window" role="APPRAISER" permission="transfer.create"  index="11"/>
        <invoker type="faas_open.GR" action="open" caption="FAAS (Open)" mnemonic="o" shortcut="ctrl O" target="window" icon="images/open.png" role="APPRAISER" permission="faas.open" />
        <invoker type="faas_viewprevious.GR" action="openPrevious" caption="View Previous" target="popup" icon="images/doc-view.png" />
        <invoker type="quick_launcher" code="GE01"     action="generalRevision"  caption="General Revision" target="window" />
        
        <invoker type="formActions" action="modifyPin" caption="Modify Pin"  mnemonic="p"  visibleWhen="#{faas.docstate == 'INTERIM'}"  role="APPRAISER" icon="images/edit.png" />
        <invoker type="formActions" action="loadPrevMemoranda" caption="Copy Previous Memoranda"  visibleWhen="#{faas.docstate == 'INTERIM'}"  role="APPRAISER" icon="images/doc-view.png" />
        
    </invokers>
    
<code lang="groovy">
<![CDATA[        
import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.reports.*

public class GeneralRevisionController extends etracs2.rpt.groovy.AbstractFAASController 
{
    @Service('FAASService')
    def svc
    
    @Service('GeneralRevisionService')
    def grSvc
    
    @Service('Var')
    def var
    
    public def getSvc(){ return svc }
    public def getVar(){ return var }
    public def getTxnType(){ return 'GR' }
    public def getTxnTitle(){ return 'General Revision' }
    
    public def initFaasForTransaction() {
        return svc.initGeneralRevisionTransaction( getCommonInitTxnParams() )
    }
    
    def generalRevision() {
        initTxn()
        return 'grinit' 
    }
    
    def modifyPin() {
        return InvokerUtil.lookupOpener("util:modifypin", [faas:faas, handler:{ o->
            if( o.suffix > 0 ) {
                    faas.rp.pin = o.fullpin[0..-6]
            }
            else {
                    faas.rp.pin = o.fullpin
            }

            faas.rp.section 	= o.ssection 
            faas.rp.parcel 	= o.sparcel 
            faas.rp.pintype 	= o.pintype 

            if( o.lgutype == 'city' || o.lgutype == 'CITY' )
            {
                    faas.rp.munidistrictindex	= o.district.indexno
                    faas.rp.munidistrict	= o.district.lguname 
            }
            else 
            {
                    faas.rp.munidistrictindex	= o.municity.indexno
                    faas.rp.munidistrict	= o.municity.lguname 
            }

            faas.rp.barangayindex		= o.barangay.indexno 
            faas.rp.barangay			= o.barangay.lguname 
            faas.rp.barangayid			= o.barangay.objid 
            faas.rpu.fullpin			= o.fullpin 
            faas.oldpin                         = o.oldpin 
            if( o.suffix != 0 )
                    faas.rpu.suffix 		=  o.suffix 
            binding.refresh("faas.rpu.fullpin|faas.rp.*")  
        }])
    }
    
    def hascopymemoranda = false 
    
    void loadPrevMemoranda() {
        if( hascopymemoranda ) return; 
    
        if(! faas.info.memoranda) faas.info.memoranda = ''
       
        if( faas.previousfaases && faas.previousfaases.size() == 1 ) {
            def prevfaas = [ objid:faas.previousfaases[0].faasid ]
            def f = svc.open(prevfaas.objid) 
            if( f ) faas.info.memoranda = faas.info.memoranda + " " +  f.info.memoranda
            hascopymemoranda = true
        }
    }
    
}
]]>
</code>
<pages>
    <page name="grinit" template="etracs2.rpt.faas.FAASGRInitPage"/>
</pages>
</workunit>


