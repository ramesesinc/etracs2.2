<?xml version="1.0" encoding="UTF-8"?>
<workunit>
    <invokers>
        <invoker folderid="/explorer/txn/landtax" action="init"  caption="RPT Billing (Admin)"  role="LANDTAX_ADMIN" permission="rptbilling.generate"/>
        
        <invoker type="home.action"      action="init"  caption="RPT Billing (Admin)"  target="window" index="551" icon="images/bill.png" role="LANDTAX_ADMIN" permission="rptbilling.generate" />

        <invoker type="formActions" action="_close" caption="Close" shortcut="ctrl W" mnemonic="c" icon="images/cancel.png" immediate="true" />
        <invoker type="formActions" action="printBill" caption="Print" shortcut="ctrl P" mnemonic="p" role="LANDTAX" permission="rptbilling.printbill"/>
        <invoker type="formActions" action="previewBill" caption="Preview" shortcut="ctrl v" mnemonic="v" icon="images/doc-view.png" role="LANDTAX_ADMIN" permission="rptbilling.previewbill"/>
        
        <invoker type="previewActions" action="backMain" caption="Back" mnemonic="b" icon="images/back.png"/>
    </invokers>
    
    <code lang="groovy">
        <![CDATA[
        
import com.rameses.rcp.common.*
import com.rameses.rcp.annotations.*
import com.rameses.osiris2.client.*
import com.rameses.osiris2.reports.*
import java.rmi.server.UID;


public class RPTBillingController  {
    @Binding
    def binding
    
    @Service('DateService')
    def dateSvc
    
    @Service("RPTBillingService")
    def billingSvc;

    @Service("ReportParameterService")
    def reportSvc
    
    @Service("LguService")
    def lguSvc 
    
    def parsedate
    def bill
    def taxpayer 
    
    def barangays
    def barangay 
    def count 
    
    void init() {
        parsedate = dateSvc.parseCurrentDate()
        bill = [
            taxpayerid     : null,
            taxpayerno     : null,
            taxpayername   : null,
            taxpayeraddress: null,
            ledgerids      : [],
            advancepayment : false,
            billdate       : parsedate.date,
            billtoyear     : parsedate.year,
            billtoqtr      : 4,
            fullpayment    : true,
            qtrlypaymentavailed : false, 
            advancepayment : false,
            landtax_admin : true,
            items          : []
        ]
    }
    
    def backMain() {
        return 'default' 
    }
    
    
    def getLookupTaxpayer() {
        return InvokerUtil.lookupOpener('entity.lookup', [:])
    }
    
    void setTaxpayer( entity ) {
        this.taxpayer           = entity 
        bill.taxpayerid         = entity?.objid
        bill.taxpayerno         = entity?.entityno
        bill.taxpayername       = entity?.entityname
        bill.taxpayeraddress    = entity?.entityaddress
        
        propertyList = []
        if ( entity ){
            propertyList = billingSvc.getPropertyForBilling( bill );
            propertyList.each{ it.selected = true }
            listHandler.load()
            
            barangays = lguSvc.getBarangays() 
            count  = propertyList.size();
        }
        binding.refresh('bill.taxpayer.*|barangay|count')
    }
    
    void setBarangay( barangay ) { 
        this.barangay = barangay 
        if( barangay ) {
            propertyList.each { 
                it.selected = false;
                if( it.barangayid == barangay.objid ) it.selected = true;                 
            }
        } else {
            propertyList.each { it.selected = true };
        }
        
        listHandler.load()      
        count  = propertyList.findAll{it.selected == true}.size() ;
        binding.refresh('count')
    }
    
    void buildBillReportInfo(){
        if( bill.billdate ) bill.billdate = dateSvc.parse( 'yyyy-MM-dd', bill.billdate )
        if( bill.advancepayment && bill.billdate <= (parsedate.date - 1 ))  {
            throw new Exception('Advance Billing Date must be greater than todays date.')
        }
        
        
        def selectedLedgers = propertyList.findAll{ it.selected == true }
        if (selectedLedgers.size() < propertyList.size() ){
            bill.ledgerids = selectedLedgers.objid
        }
        
        bill = billingSvc.generateBill( bill )
        report.viewReport()
    }
    
    void printBill() {
        buildBillReportInfo()
        ReportUtil.print( report.report, true )
    }
    
    def previewBill() {
        buildBillReportInfo()
        return 'preview'
    }
    
    def report = [
        getReportName : { return 'rptbilling/rptbilling' },
        getReportData : { return bill },
        getParameters : { return reportSvc.getStandardParameter( OsirisContext?.env?.USERNAME ) }
    ] as ServerReportModel
    
    List getQuarters() {
        return  [1,2,3,4]
    }
    
    
    /*==============================================
    *
    * SELECTION SUPPORT 
    *
    =================================================*/
    
    def propertyList = []
    
    void selectAll(){
        propertyList.each{
            it.selected = true;
        }
        listHandler.load();
    }
    
    void deselectAll(){
        propertyList.each{
            it.selected = false;
        }
        listHandler.load();
    }
    
    def listHandler = [
        getRows    : { return 100 },
        
        getColumns : { return [
            new Column(name:'selected', caption:'Include?', width:50, editable:true, type:'boolean' ),
            new Column(name:'tdno', caption:'TD No.', width:120),
            new Column(name:'rputype', caption:'Type', width:50),
            new Column(name:'pin', caption:'PIN', width:140),
            new Column(name:'classcode', caption:'Class',   width:40),
            new Column(name:'cadastrallotno', caption:'Lot No.', width:100),
            new Column(name:'totalareaha', caption:'Area (ha)', width:70, type:'decimal', format:'#,##0.0000'),
            new Column(name:'assessedvalue', caption:'Assessed Value', width:100, type:'decimal', format:'#,##0.00'),
        ]},
        
        fetchList : { return propertyList },
        
    ] as SubListModel 
    
}


]]>
    </code>
    
    <pages>
        <page template="etracs2.rpt.billing.RPTBillingBySelectionPage" />
        <page name="preview" template="etracs2.common.PreviewPage"/>
    </pages>
</workunit>
