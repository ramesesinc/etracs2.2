<workunit>
    <invokers>
        <invoker type="rptauction:nor" action="init" caption="Notice of Redemption" target="window"/>
        <invoker type="rptauction_open:nor" action="open" caption="Notice of Redemption" target="window"/>
        
        <invoker type="formActions" action="_close" caption="Cancel"  mnemonic="c" immediate="true" icon="images/cancel.png"  />        
        <invoker type="formActions" action="save" caption="Save"  mnemonic="s"  icon="images/save.png" visibleWhen="#{mode=='init'}" />        
        <invoker type="formActions" action="approved" caption="Approved"  mnemonic="a"   visibleWhen="#{docstate=='OPEN'}" icon="images/approve.png" role="LANDTAX" permission="rptauction.approveNOR" />
        <invoker type="formActions" action="disapproved" caption="Disapproved"  mnemonic="a"   visibleWhen="#{docstate=='OPEN'}" icon="images/disapprove.png" role="LANDTAX" permission="rptauction.disapproveNOR" />
        <invoker type="formActions" action="previewNotice" caption="Preview Notice of Redemption "  mnemonic="p"   visibleWhen="#{mode!='init'}" icon="images/doc-view.png"/>
        <invoker type="formActions" action="previewCertificate" caption="Preview Certificate of Redemption "  mnemonic="r"   visibleWhen="#{mode!='init'}" icon="images/doc-view.png"/> 
        
        <invoker type="previewActions"  action="back" caption="Back" icon="images/back.png" immediate="true" />
    </invokers>
    <code>
<![CDATA[

import com.rameses.rcp.common.*;
import com.rameses.rcp.annotations.*;
import com.rameses.osiris2.client.*;
import com.rameses.osiris2.reports.*;
import etracs2.groovy.CommonUtil

public class RPTAuctionNOR
{
    @Binding
    def binding

    @Service('RPTAuctionService')
    def svc;
    
    @Service( 'ReportParameterService')
    def paramSvc
    
    @Service( 'DateService')
    def dtSvc
    
    def entity; 
    def mode
    def objid;
    def document
    
    public void init() {
        mode = 'init';
        entity = svc.open(objid)
        entity.doctype = document.code
        entity.doctypedesc = document.description
        entity.parentid = entity.objid
        entity.parentorno = entity.orno
        entity.parentordate = entity.ordate
        entity.redemptiondate = dtSvc.serverDate
        entity.docstate = 'DRAFT'
    }
    
    public def open() {
        entity = svc.open(entity.objid)
        mode = 'saved'
        return "default";
    }
    
    public void save() {
        entity = svc.supersedeDoc( entity )
        mode = 'saved'
        MsgBox.alert("Successfully saved.    ")
    }
    
    
    def previewNotice() {
        report.viewReport()
        return "preview";
    }
    
    def previewCertificate() {
        return InvokerUtil.lookupOpener('rptauction:cor', [entity:entity]);
    }
    
    def approved() {
        if( ! MsgBox.confirm("Approve redemption? ")) return;
        
        entity = svc.approvedAuction(entity);
        binding.refresh()
    }
    
    def disapproved() {
        if( ! MsgBox.confirm("Disapprove redemption? ")) return;
        
        entity.docstate = 'DISAPPROVED';
        entity = svc.disapprovedAuction(entity);
        svc.update( entity );
        binding.refresh()
    }
    
    def back() {
        return "default";
    }
    
    def sdf = new java.text.SimpleDateFormat( "MMMMM dd, yyyy")
    def sdf1 = new java.text.SimpleDateFormat( "yyyy-MM-dd")
    
    def report = [
        getReportName : { return 'demandletters/noticeofredemption' }, 
        getReportData : { 
            def reportData = entity.clone();
            reportData.redemptionordate = sdf.format( sdf1.parse(reportData.redemptionordate))
            reportData.auctiondate = sdf.format( sdf1.parse(reportData.auctiondate))
            reportData.redemptiondate = sdf.format( sdf1.parse(reportData.redemptiondate))
            reportData.parenttxndate = sdf.format( sdf1.parse(reportData.parenttxndate))
            reportData.land = (reportData.rputype == 'land') ? 'X' : ' '
            reportData.mach = (reportData.rputype == 'mach') ? 'X' : ' '
            reportData.improvement = (reportData.rputype.matches("bldg|misc|plant")) ? 'X' : ' ';
            reportData.delinquent = (reportData.redeembyinfo == "1") ? 'X':' ';
            reportData.representative = (reportData.redeembyinfo == "2") ? 'X':' ';
            reportData.otherperson = (reportData.redeembyinfo == "3") ? 'X':' ';
            return reportData  
        },
        getParameters : {
            def params = paramSvc.getStandardParameter( OsirisContext.env.USERNAME )
            return params 
        }
    ]  as ServerReportModel
    
}

    
]]>
    </code>
    <pages>
        <page template="etracs2.rpt.report.rptauction.NORPage"/>
        <page name="preview" template="etracs2.common.PreviewPage" />
    </pages>
</workunit>