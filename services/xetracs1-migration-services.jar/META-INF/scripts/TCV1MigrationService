import com.rameses.annotations.*
import com.rameses.common.*
import java.util.concurrent.*;

class TCV1MigrationService
{
    @PersistenceContext("etracsv1")
    def em1;
    
    @PersistenceContext("main")
    def em2;
    
    @Service('NumberService')
    def numSvc
	
	@Service('CommonMigrationService')
	def commSvc;
    
	@ProxyMethod 
	public def getObjidList( version, objname ) {
		return commSvc.getObjidList(version, objname, 'tc')
	} 
	
	
	@ProxyMethod()
	public def insertObject( version, objname, list )
	{
		return commSvc.insertObject(version, objname, list, 'tc')
	}
	
	@ProxyMethod
	public void deleteTargetDB(objname) {
		em2.sqlContext.createExecutor( "delete from $objname" ).execute();
	}
	
	@ProxyMethod
	public void initAccount() {
		def sql = """
			insert into account
				([objid], schemaname, schemaversion, fromyear, toyear, acctcode, accttitle, charttype, accttype, acctlevel)
			values
				('NGAS', 'account:account', '1.0', 2011, 0, 'NGAS', 'NGAS', 'NGAS', 'CHART', 0),
				('SRE', 'account:account', '1.0', 2011, 0, 'SRE', 'SRE', 'SRE', 'SRE', 0)
		""";
		em2.sqlContext.createExecutor(sql).execute();
	}
	
	@ProxyMethod()
	public def getRevenueIds( ) {
		return em2.sqlContext.createNamedQuery('etracsv1_tc:revenue_ids').resultList;
	}
	
	@ProxyMethod()
	public def insertRevenue( list ) {
		def errorlist = []
		list.each{ item -> 
			try {
				def info = em2.sqlContext.createNamedQuery('etracsv1_tc:revenue_info')
							.setParameter( 'objid', item.objid )
							.singleResult;
				
				em2.sqlContext.createNamedExecutor('etracsv1_tc:revenue_insert')
					.setParameters( info) 
					.execute();
			} catch(e) {
				println e.message;
				errorlist << [ 'objid': item.objid , 'err-message': e.message ]
			}		
		
		}
		
		return errorlist;
		
	}
	
	@ProxyMethod
	public void updateAccountChartType() {
		em2.sqlContext.createExecutor( """
			update account set charttype = 'NGAS' where [objid] like 'NGAS%'
		""").execute();
	}
	
	@ProxyMethod
	public void updateIncomeAccount() {
		def list = em1.sqlContext.createQuery('''
			select objid, acctno from incomeaccount 
		''').resultList;
		list.each{ item ->
			em2.sqlContext.createExecutor( '''
				update incomeaccount set acctcode=$P{acctno} 
				where objid=$P{objid}
			''').setParameters( item).execute();
		}
	}
	
	@ProxyMethod
	public void updateAccountPathbyTitle() {
		em2.sqlContext.createExecutor( """
			update account set 
				pathbytitle = substring(pathbytitle,1,6) 
			where pathbytitle like 'null/%'
		""").execute();	
	}
	
	@ProxyMethod
	public void updateBusinessReceipt() {
		def list = em1.sqlContext.createQuery( """
			SELECT 
				r.[objid] AS receiptid,
				CASE WHEN ba.type = 'NEW' THEN DATENAME(q, a.dtapplied  ) ELSE 4 END AS qtr,
				a.[objid] AS applicationid,
				b.businessaddress,
				b.tradename,
				NULL AS applicationlastmodified,
				a.year,
				b.[objid] AS businessid 
			FROM receipt r
				INNER JOIN business b ON r.businessid = b.[objid] 
				INNER JOIN abstractbpapplication a ON b.applicationid = a.[objid]
				INNER JOIN bpapplication ba ON a.[objid]= ba.[objid]
			WHERE r.dtype = 'BPReceipt'
		""").resultList;
		
		list.each { item -> 
			em2.sqlContext.createExecutor( '''
				update receiptlist set extended=$P{extended} where objid=$P{objid} and doctype = $P{doctype}
			''').setParameters( [ objid: item.objid, extended:em2.serializer.write( info ) ], doctype: 'BUSINESS_TAX' )
				.execute();
		}
	}
	
	
	@ProxyMethod
	public void insertLiquidationrcd() {
		def list = em2.sqlContext.createQuery( """
			select 
				(ll.[objid] + '-' +  ia.fundname) as [objid], 'CLOSED' as docstate, 'liquidationrcd' as schemaname, 
				'1.0' as schemaversion, ll.[objid] as liquidationid, min(ll.txnno) as liquidationno, 
				min(ll.txndate) as liquidationdate, min(ll.liquidatingofficerid) as lqofficerid, min(ll.liquidatingofficername) as lqofficername, 
				min(ll.liquidatingofficertitle) as lqofficertitle, min(ia.fundid) as fundid, min(ia.fundname) as fundname, min(ll.depositedbyid) as cashierid, 
				min(ll.depositedbyname) as cashiername, min(ll.depositedbytitle) as cashiertitle, SUM(ri.amount) as cash, 
				0.0 as noncash, SUM(ri.amount) as amount, '[[:]]' as denominations, '[]' as noncashpayments, 
				min(ll.depositid) as depositid, min(ll.dtdeposited) as dtdeposited
			from liquidation ll
				inner join remittance rl on ll.[objid] = rl.liquidationid 
				inner join receiptlist r on rl.[objid] = r.remittanceid
				inner join receiptitem ri on r.[objid] = ri.receiptid
				inner join incomeaccount ia on ri.acctid = ia.[objid] 
			where not exists(select * from liquidationrcd where liquidationid = ll.[objid] )
			group by ll.[objid], ia.fundname
		""").resultList;
		list.each { item ->
			em2.sqlContext.createExecutor('''
				insert into liquidationrcd (
					"objid", docstate, schemaname, schemaversion, liquidationid, 
					liquidationno, liquidationdate, lqofficerid, lqofficername, 
					lqofficertitle, fundid, fundname, cashierid, cashiername, 
					cashiertitle, cash, noncash, amount, denominations, 
					noncashpayments, depositid, dtdeposited
				) values (
					$P{objid}, $P{docstate}, $P{schemaname}, $P{schemaversion}, $P{liquidationid}, 
					$P{liquidationno}, $P{liquidationdate}, $P{lqofficerid}, $P{lqofficername}, 
					$P{lqofficertitle}, $P{fundid}, $P{fundname}, $P{cashierid}, $P{cashiername}, 
					$P{cashiertitle}, $P{cash}, $P{noncash}, $P{amount}, $P{denominations}, 
					$P{noncashpayments}, $P{depositid}, $P{dtdeposited}
				)
			''').setParameters(item).execute();
		}
	}
	
	@ProxyMethod
	public void updateReceiptItemLiquidationId() { 
		em2.sqlContext.createExecutor( '''
			update ri set 
				ri.liquidationrcdid = (rl.liquidationid + '-' + ia.fundname) 
			from receiptitem ri 
				inner join receiptlist r on r."objid" = ri.receiptid 
				inner join remittance rl on rl."objid" = r.remittanceid 
				inner join incomeaccount ia on ri.acctid = ia."objid"
			where ri.liquidationrcdid is null and rl.liquidationid is not null 
		''').execute();
	} 
	
	@ProxyMethod
	public void updateRevenueLiquidationId() {
		em2.sqlContext.createExecutor( '''
			update rev set 
				rev.liquidationrcdid = ri.liquidationrcdid
			from revenue rev 
				inner join receiptitem ri on ri."objid" = rev.receiptitemid 
			where rev.liquidationrcdid is null 
		''').execute();
	}
	
	
	@ProxyMethod
	public void updateRevenueDepositInfo() {
		em2.sqlContext.createExecutor( '''
			update rev set	
				rev.depositid = d."objid",
				rev.depositno = d.txnno,
				rev.depositdate = lr.dtdeposited,
				rev.deposittimestamp = ( year(lr.dtdeposited) + 
					datename(q, lr.dtdeposited) +  
					case when month(lr.dtdeposited) < 10 then ('0' + month(lr.dtdeposited)) else month(lr.dtdeposited) end + 
					case when day(lr.dtdeposited) < 10 then ('0' + day(lr.dtdeposited)) else day(lr.dtdeposited) end 
				)
			from revenue rev 
				inner join liquidationrcd lr on lr."objid" = rev.liquidationrcdid  
				inner join deposit d  on lr.depositid = d."objid" 
			where  rev.liquidationrcdid is not null and rev.depositid is null
		''').execute();
	}
	
	
	@ProxyMethod
    public void updateLiquidationInfo() {
        def lqlist = em1.sqlContext.createQuery('''
			select * from liquidation 
		''').resultList
        lqlist.each { lq ->
            lq.denominations = [
                    [caption:"1000.00"    ,denomination:1000.00    ,qty:lq.d1000qty    ,amount:lq.d1000qty*1000.0],
                    [caption:"500.00"    ,denomination:500.00    ,qty:lq.d500qty    ,amount:lq.d500qty*500.0],
                    [caption:"200.00"    ,denomination:200.00    ,qty:lq.d200qty    ,amount:lq.d200qty*200.0],
                    [caption:"100.00"    ,denomination:100.00    ,qty:lq.d100qty    ,amount:lq.d100qty*100.0],
                    [caption:"50.00"    ,denomination:50.00        ,qty:lq.d50qty        ,amount:lq.d50qty*50.0],
                    [caption:"20.00"    ,denomination:20.00        ,qty:lq.d20qty        ,amount:lq.d20qty*20.0],
                    [caption:"10.00"    ,denomination:10.00        ,qty:lq.d10qty        ,amount:lq.d10qty*10.0],
                    [caption:"Coins"    ,denomination:1.00        ,qty:lq.coins        ,amount:lq.coins] ]
					
            em2.sqlContext.createExecutor('UPDATE liquidation SET denominations = $P{denominations} WHERE [objid] = $P{objid}')
                    .setParameters([objid:lq.objid, denominations:em2.serializer.write( lq.denominations ) ]).execute() 
        }
	}
     
	
    @ProxyMethod
	public void updateRemittanceInfo() {
		def remittancelist = em1.sqlContext.createQuery('''
			select * 
			from collectionremittance r
				
		''').resultList
		remittancelist.each { rem ->
			rem.denominations = [
					[caption:"1000.00"	,denomination:1000.00	,qty:rem.d1000qty	,amount:rem.d1000qty*1000.0],
					[caption:"500.00"	,denomination:500.00	,qty:rem.d500qty	,amount:rem.d500qty*500.0],
					[caption:"200.00"	,denomination:200.00	,qty:rem.d200qty	,amount:rem.d200qty*200.0],
					[caption:"100.00"	,denomination:100.00	,qty:rem.d100qty	,amount:rem.d100qty*100.0],
					[caption:"50.00"	,denomination:50.00		,qty:rem.d50qty		,amount:rem.d50qty*50.0],
					[caption:"20.00"	,denomination:20.00		,qty:rem.d20qty		,amount:rem.d20qty*20.0],
					[caption:"10.00"	,denomination:10.00		,qty:rem.d10qty		,amount:rem.d10qty*10.0],
					[caption:"Coins"	,denomination:1.00		,qty:rem.coins		,amount:rem.coins]]
					
			em2.sqlContext.createExecutor('UPDATE remittance SET denominations = $P{denominations} WHERE [objid] = $P{objid}')
					.setParameters([objid:rem.objid, denominations:em2.serializer.write( rem.denominations ) ])
					.execute() 
		}
	}
    
    
    @ProxyMethod
	public void updateAccount( parentacct, level) {
		def acctlist = []
		if( ! parentacct )
			acctlist = em2.sqlContext.createQuery('SELECT [objid], accttitle FROM account WHERE parentid IS NULL').resultList
		else 
			acctlist = em2.sqlContext.createQuery('SELECT [objid], accttitle FROM account WHERE parentid = $P{parentid}').setParameter('parentid', parentacct.objid).resultList
			
			
		acctlist.each { acct -> 
			updateAccountLevel( parentacct, acct, level )
		}
	}
	
	void updateAccountLevel( parentacct, acct, level ) {
		level += 1
		
		if( parentacct ) {
			if( ! parentacct.pathbyids ) acct.pathbyids = ''
			if( ! parentacct.pathbytitle) acct.pathbytitle = ''
			if( ! acct.pathbyids ) acct.pathbyids = ''
			if( ! acct.pathbytitle) acct.pathbytitle = ''
			acct.pathbyids = parentacct.pathbyids + '/' + acct.objid 
			acct.pathbytitle = parentacct.pathbytitle + '/' + acct.accttitle 
		}
		
		def params = [
			objid		: acct.objid, 
			level 		: level,
			pathbyids 	: acct.pathbyids,
			pathbytitle	: acct.pathbytitle,
		]
		em2.sqlContext.createExecutor('UPDATE account SET acctlevel = $P{level}, pathbyids=$P{pathbyids}, pathbytitle=$P{pathbytitle} WHERE [objid] = $P{objid}')
				.setParameters( params ).execute() 
		
		updateAccount( acct, level )
	}
}	