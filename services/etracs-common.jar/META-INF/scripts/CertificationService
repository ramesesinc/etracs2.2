import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class CertificationService{
	
	@PersistenceContext('main')
	def em;
	
	@Service('DateService')
	def dtSvc;
	
	@Service('SequenceService')
	def seqSvc 
	
	@Service('ETRACSUtilService')
	def utilSvc

	def SCHEMA_NAME = 'certification';
	
	
	/*============================================================
	** search contains [opener:'', searchText:'']
	**==========================================================*/
	@ProxyMethod
	public def getList(search, params) {
		search.searchText = (search.searchText ? searchText + '%' : '%' )
		params += search
		
		def filters = [
			[' AND c.requestedby LIKE $P{searchText}'],
			[' AND c.txnno LIKE $P{searchText}'],
			[' AND c.certifiedby = $P{searchText}'],
			[' AND c.createdby LIKE $P{searchText}'],
		]
		return utilSvc.getListFromQuery('certification:getList', filters, params, 'o.objid')
	}

	@ProxyMethod
	public def open( objid ){
		return em.read(SCHEMA_NAME, [objid:objid])
	}

	@ProxyMethod
	public def create( entity, reftype, barcodekey ) {
		def year = dtSvc.getServerYear()
		def seqkey = reftype + '-' + year
		entity.txnno = year + seqSvc.getNextFormattedSeries( seqkey )
		entity.txndate = dtSvc.getServerDate()
		entity.reftype = reftype 
		if( barcodekey ) {
			entity.barcode = barcodekey + year + entity.txnno 
		}
		em.validate( SCHEMA_NAME, entity)
		em.create( SCHEMA_NAME, entity)
		return entity 
	}
		
}