/*
* @author    : jaycverg
* @copyright : Rameses Systems Inc
* @date      : july 11, 2012
*/

import com.rameses.annotations.*;
import com.rameses.common.*
import java.rmi.server.*

public class RealPropertyInterceptor
{
	@Service("RealPropertyService")
	def svc
	
	@PersistenceContext('main')
    def em
	
    
	@After(pattern="xxxFAASService.approve.*")
	public void afterApprove( evt ) {
		def faas = evt.result

		if( faas?.rpu?.rputype == 'land' ) {
			println "saving realproperty info for faas: $faas.info.tdno"
			
			def realproperty = [:]
			realproperty.putAll( faas.rp )
			realproperty.landfaasid = faas.objid
			if( faas.info.txntype == 'TRC' ) {
				realproperty.objid = faas.objid 
			}
			svc.save( realproperty )
		}
		
		buildRPU(faas);
	}
	
	private void buildRPU(faas) {
		println "==================== build rpu ===================="
		def rpu =  faas.rpu;
		if("land".equalsIgnoreCase(rpu.rputype)) {
			rpu.info.landdetails.sort{ a, b -> return b.areasqm <=> a.areasqm } 
			rpu.info.landdetails.eachWithIndex{r, i->
			
				def x = [
					faasid: faas.objid,
					rpucount : (i == 0 ? 1 : 0),
					rputype: rpu.rputype,
					taxable: toInt( r.taxable),
					actualuseid: r.actualuseid ,
					actualusecode: r.actualusecode ,
					actualusename:r.actualusename ,
					areasqm: r.areasqm,
					areaha: r.areaha,
					av: r.assessedvalue,
					mv: r.marketvalue, 
				]
			
				insertData( x );
			}
		} else if("mach".equalsIgnoreCase(rpu.rputype)) { 
			rpu.info.machuses.each{
				def r = [
					faasid: faas.objid,
					rpucount : 1,
					rputype: rpu.rputype,
					taxable: toInt( rpu.taxable),
					actualuseid: it.actualuseid,
					actualusecode: it.actualusecode,
					actualusename:it.actualusename,
					areasqm: 0.0,
					areaha: 0.0,
					av: it.assessedvalue,
					mv: it.marketvalue, 
				]
				insertData( r )
			}
		} else if( "plant".equalsIgnoreCase(rpu.rputype)) { 
			
		} else if( "misc".equalsIgnoreCase(rpu.rputype)) {  
			rpu.info.miscrpuitems.each{
				def r = [
					faasid: faas.objid,
					rpucount : 1,
					rputype: rpu.rputype,
					taxable: toInt( rpu.taxable),
					actualuseid: it.actualuseid,
					actualusecode: it.actualusecode,
					actualusename:it.actualusename,
					areasqm: 0.0,
					areaha: 0.0,
					av: it.assessedvalue,
					mv: it.marketvalue, 
				]
				insertData( r )
			}
		} else {
			rpu.info.bldguses.sort{ a, b -> return b.area <=> a.area } 
			rpu.info.bldguses.eachWithIndex{r, i ->
				def x = [
					faasid: faas.objid,
					rpucount : (i == 0 ? 1 : 0),
					rputype: rpu.rputype,
					taxable: toInt( rpu.taxable),
					actualuseid: r.actualuse.actualuseid ,
					actualusecode: r.actualuse.actualusecode ,
					actualusename:r.actualuse.actualusename ,
					areasqm: r.area,
					areaha: 0.0,
					av: r.assessedvalue,
					mv: r.marketvalue, 
				]
				insertData( x )
			}
		}
	}
	
	private void insertData( rpu ) {
		rpu.objid = "RPU" + new UID();
		def stmt = '''
			insert into faas_rpu
			(	
				objid,faasid,rputype,rpucount,actualuseid,actualusecode,actualusename,
				taxable,areasqm,areaha,av,mv
			)
			values 
			(
					$P{objid},$P{faasid},$P{rputype},$P{rpucount},
					$P{actualuseid},$P{actualusecode},$P{actualusename},$P{taxable},
					$P{areasqm},$P{areaha},$P{av},$P{mv}
			);
		''';
		em.sqlContext.createExecutor( stmt).setParameters( rpu ).execute()
	}
	
	def toInt( value ) {
		if( value instanceof Integer ) return value 
		if( value instanceof Boolean && value == true ) return 1
		
		return 0
	}

}
