import com.rameses.annotations.*;
import com.rameses.rules.common.*;

public class BPBillingService
{
	@PersistenceContext('main')
	def em 
	
	@Resource("RuleService/local")
	def ruleService;
	
	@Service("DateService")
	def dtService;
	 
	@Service('NumberService')
	def numSvc;
		
	@Service('Var')
	def var; 
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	
	@Service("IncomeAcctService")
	def incomeSvc;
	
	def advancepayment
	def billdate
	

	@ProxyMethod
	public def getBilling( billing ) {
		billing.info.billdate = dtService.serverDate
		validateAdvBill( billing )
		validateAppFullyPaid( billing )
		def businesslist = getBusinessByTaxpayer( billing )
		if( !businesslist ) throw new Exception("There are no businesses registered for this taxpayer.");
		billing.items = [];
		billing.grandtotal = 0.0;
		
		for ( business in businesslist ) {
			def applist = getApplicationsByBusinessId( business.objid );
			for( application in applist ){
				def item = [
					iyear		: application.iyear, 
					appno       : application.txnno,
					barcode     : application.barcode,
					barcodeurl  : var.get('barcode_url').replace('$P{data}', application.barcode),
					txntype     : application.txntype,
					docstate	: application.docstate, 
					txndate     : new java.text.SimpleDateFormat( "yyyy-MM-dd" ).format( application.txndate ),
					tradename 	: business.tradename,
					address		: business.businessaddress,
					ledgerid	: business.objid,
					yearstarted	: business.yearstarted,
					lastyearpaid: business.lastyrpaid,
					lastqtrpaid	: business.lastqtrpaid,
					taxfees		: getUnpaidTaxFeesByApplication( application ),
					lobs 		: application.lobs
				];
				
				if( item.taxfees ){
					def bill = buildBill( item );
					bill.totaldiscount = new BigDecimal('0.0');
					bill.totalsurcharge = new BigDecimal('0.0');
					bill.totalamount = new BigDecimal('0.0');
					bill.totalinterest = new BigDecimal('0.0');
					bill.grandtotal = new BigDecimal('0.0');
					
					bill.first_qtr_total = new BigDecimal('0.0');
					bill.second_qtr_total = new BigDecimal('0.0');
					bill.third_qtr_total = new BigDecimal('0.0');
					bill.fourth_qtr_total = new BigDecimal('0.0');
					
					bill.taxfees.each{
						def duedate =  dtService.parseDate( getNextBillDateByQtr(it.year ,it.qtr).expirydate, null);
						it.discount  = 	new BigDecimal( numSvc.round(it.discount  ? it.discount.toString()  : '0.0') )
						it.surcharge = 	new BigDecimal( numSvc.round(it.surcharge ? it.surcharge.toString() : '0.0') )
						it.interest  = 	new BigDecimal( numSvc.round(it.interest  ? it.interest.toString()  : '0.0') )
						it.amount    = 	new BigDecimal( numSvc.round(it.amount    ? it.amount.toString()    : '0.0') )
						
						it.total 	 = it.amount + it.surcharge + it.interest - it.discount;
						it.duedate   = it.year+"-"+ "${duedate.month}".toString().padLeft(2,'0') +"-"+ "${duedate.day}".toString().padLeft(2,'0');
						it.period 	 = formatQtr( it.qtr ) + ", $it.year".toString()
						
						bill.totalamount += it.amount;
						bill.totalsurcharge += it.surcharge;
						bill.totalinterest += it.interest;
						bill.totaldiscount += it.discount;
						bill.grandtotal += it.total;
						
						if( it.qtr == 1 ) bill.first_qtr_total += it.total;
						if( it.qtr == 2 ) bill.second_qtr_total += it.total;
						if( it.qtr == 3 ) bill.third_qtr_total += it.total;
						if( it.qtr == 4 ) bill.fourth_qtr_total += it.total;
					}
					
					billing.grandtotal += bill.grandtotal;
					billing.items << bill;
				}
		
			}
		}
		
		if( !billing.items ) throw new Exception("Registered business is fully paid.");
		billing.items = billing.items.findAll{ it.grandtotal > 0.0 }
		billing.items.sort{ it.appno };	
		billing.info.billdate = billdate ? dtService.parse('yyyy-MM-dd', billing.billdate) : dtService.serverDate
		billing.expirydate = getNextBillDate(  billing.info.billdate  ).expirydate
		return billing;
	}

	@ProxyMethod
	public def getNextBillDateByQtr( year, qtr ) {
		def day = 1;
		if( qtr == 1 ) day = day + utilSvc.toInteger(var.bp_allowed_days_for_discount, 0 ) + 1
		return getNextBillDate(dtService.getBeginningQtrDate( qtr, year, day) );
	}
	
	@ProxyMethod
	public def getNextBillDate( def date ) {
		def dt = dtService.parseDate(date,null);
		
		//check in database if there is qtr deadline overrides
		def qtr_deadline = em.sqlContext.createQuery('''
				select expirydate,expirytype from bplexpiry 
				where iqtr=$P{qtr} and iyear=$P{year}
				and expirydate >= $P{date}
				order by expirydate asc 
				''').setParameters([qtr:dt.qtr, year:dt.year, date:dt.date]).singleResult;
		
		//check discount, surcharge or interest. discount at beginning of year only
		def expirydate = null;
		def expirytype = null;

		if( qtr_deadline ) {
			expirydate = qtr_deadline.expirydate;
			expirytype = qtr_deadline.expirytype;
		}
		
		//check discount first
		int allowed_days_for_discount = utilSvc.toInteger(var.bp_allowed_days_for_discount, 0 )
		if( allowed_days_for_discount ) {
			if(expirytype?.equalsIgnoreCase("DISCOUNT")) {
				return qtr_deadline;
			}
			else {
				def testdate = dtService.getBeginningQtrDate( 1, dt.year, 1)+ (allowed_days_for_discount-1);
				if( !date.after(testdate)) {
					return [expirytype:"DISCOUNT",expirydate:testdate];
				}
			}
		}

		if( expirytype?.equalsIgnoreCase("SURCHARGE")) {
			return qtr_deadline;
		}
		else {
			int days_before_qtr_surcharge = utilSvc.toInteger( var.bp_days_before_qtr_surcharge, 20);
			def testdate = dtService.getBeginningQtrDate( dt.qtr, dt.year, 1)+ (days_before_qtr_surcharge-1);
			if( !date.after(testdate)) {
				return [expirytype:"SURCHARGE",expirydate:testdate];
			}
		}	

		if( qtr_deadline ) {
			return qtr_deadline;
		}	
		else {
			return [expirytype: "INTEREST", expirydate: dtService.getMonthEndDate( date ) ];
		} 
	}

	
	private def formatQtr( qtr ){
		if( !qtr ) return
		else if( qtr == 1 ) return qtr+"st Qtr"
		else if( qtr == 2 ) return qtr+"nd Qtr"
		else if( qtr == 3 ) return qtr+"rd Qtr"
		else return qtr+"th Qtr"
	}
	
	private void validateAdvBill( billing ){
		def currentdate = dtService.parseCurrentDate()
		advancepayment = null 
		if( billing.advancepayment ) { 
			advancepayment = billing.advancepayment
			billdate = dtService.parseDate( billing.billdate, null )
			billing.info.billdate = billdate.date
			if( billdate.date.time <= currentdate.date.time )
				throw new Exception( "Bill date should be later than today." )
		}
		else billdate = null 
	}
	
	
	private def validateAppFullyPaid( billing ){ 
		def childapp = em.sqlContext.createNamedQuery( 'business:getAppByAppId' ).setParameter( 'applicationid', billing.info.applicationid ).singleResult
		if( childapp ) throw new Exception( "Appication No. $billing.info.appno is fully paid." )
	}
	
	private def getBusinessByTaxpayer( billing ){
		def params = [
			applicationid 	: 	billing.info.applicationid,
			taxpayerid 		: 	billing.info.taxpayerid, 
			tradename 		: ( billing.info.tradename ? billing.info.tradename : '%' ),
			barangayid 		: ( billing.info.barangayid ? billing.info.barangayid : '%' ),
		]
		return em.sqlContext.createNamedQuery( 'business:getListByTaxpayerid').setParameters( params ).resultList;
	}
	
	private def getTaxFeesByBusinessId( buisnessid ) {
		return em.sqlContext.createNamedQuery( 'bpledger:getBPReceivablesByBusinessId' ).setParameters( [businessid:businessid] ).resultList;
	}
	
	
	private def getUnpaidTaxFeesByBusinessId( businessid ) {
		return em.sqlContext.createNamedQuery('bpledger:getUnpaidReceivablesByBusinessid')
							.setParameter('businessid', businessid)
							.resultList;
	}
	
	private def getApplicationsByBusinessId( businessid ) {
		return em.sqlContext.createNamedQuery( 'business:getApplicationsByBusinessId' )
				.setParameters( [businessid:businessid] )
				.resultList.each{
					it.lobs = em.serializer.read( it.lobs)
				};
	}
	
	
	private def getUnpaidTaxFeesByApplication( app ) {
		return em.sqlContext.createNamedQuery( 'bpledger:getUnpaidReceivables')
						.setParameter('applicationid', app.objid )
						.resultList 
	}
	
	@ProxyMethod
	public def buildBill( bill ) {
		if( bill.capturepayment) {
			advancepayment = true;
			billdate = bill.billdate
		}
	
		def facts = createFacts( bill  )
		def actionList = ruleService.createRuleAction()
		if( !actionList ) throw new Exception("Error in creating Rule Action");
		buildActionCommands( bill, facts, actionList )
		ruleService.execute( 'bpbilling', facts, [actionList:actionList], 'SURCHARGE' )
		ruleService.execute( 'bpbilling', facts, [actionList:actionList], 'INTEREST' )
		ruleService.execute( 'bpbilling', facts, [actionList:actionList], 'DISCOUNT' )
		ruleService.execute( 'bpbilling', facts, [actionList:actionList], 'SUMMARY' )
		
		bill.taxfees.each {
			it.discount = ( it.discount ) ? new BigDecimal( it.discount.toString() ) : new BigDecimal('0.0');
			it.surcharge = ( it.surcharge ) ? new BigDecimal( it.surcharge.toString() ) : new BigDecimal('0.0');
			it.interest = ( it.interest ) ? new BigDecimal( it.interest.toString() ) : new BigDecimal('0.0');
			it.amount = ( it.amount ) ? new BigDecimal( it.amount.toString() ) : new BigDecimal('0.0');
			
			it.discount = numSvc.round( it.discount )
			it.surcharge = numSvc.round( it.surcharge )
			it.interest = numSvc.round( it.interest )
			it.amount = numSvc.round( it.amount )
			
			//this is a temporary fix for this code
			//- load the incomeaccount systype if not not available
			if( it.acctsystype == null ) {
				def acct = incomeSvc.open( it.acctid );
				it.acctsystype = acct.systype;
			}
			
			//set business tax sortorder to 1
			it.sortorder = it.acctsystype == 'BUSINESS_TAX' ? 1 : 0;
		}
		
		bill.taxfees.sort{ a, b ->
		if( a.sortorder == b.sortorder ) {
				def a_year = a.year+'-'+a.qtr;
				def b_year = b.year+'-'+b.qtr;
				return a_year <=> b_year;
			}
			
			return a.sortorder - b.sortorder;
		}
		
		return bill
	}	
	
	def createFacts( bill ) {
		def facts = []
		def cyfact = createCYFact()
		facts += cyfact
		facts += createLedgerFacts( bill, cyfact )
		return facts 
	}
	
	def createCYFact( ) {
		def cyfact = ruleService.createFact('bpbilling','bp.billing.facts.CurrentYearFact')
		if( !cyfact ) throw new Exception("Error in creating Current Year Fact.");
		cyfact.year  = ( advancepayment ) ? billdate.year  : dtService.getServerYear()
		cyfact.qtr   = ( advancepayment ) ? billdate.qtr   : dtService.getServerQtr()
		cyfact.month = ( advancepayment ) ? billdate.month : dtService.getServerMonth()
		cyfact.day   = ( advancepayment ) ? billdate.day   : dtService.getServerDay()
		
		return cyfact
	}
	
	def createLedgerFacts( bill, cyfact ) {
		def facts = []
		def ledgerFact = ruleService.createFact('bpbilling','bp.billing.facts.BPLedgerFact')
		if( !ledgerFact ) throw new Exception("Error in creating Ledger Fact.");
		ledgerFact.ledgerid = bill.ledgerid 
		ledgerFact.yearstarted = bill.yearstarted
		ledgerFact.lastyearpaid = bill.lastyearpaid
		ledgerFact.lastqtrpaid  = bill.lastqtrpaid
		facts += ledgerFact 
		
		bill.taxfees.each { tf -> 
			def tffact = ruleService.createFact('bpbilling','bp.billing.facts.TaxFeeFact')
			if( !tffact ) throw new Exception("Error in creating Tax Fee Fact");
			tffact.taxfeeid = tf.objid 
			tffact.ledgerid = bill.ledgerid 
			tffact.lobid = tf.lobid 
			tffact.lobname = tf.lobname 
			tffact.year = tf.year
			tffact.qtr = tf.qtr
			tffact.acctid = tf.acctid
			tffact.accttitle = tf.accttitle
			tffact.amount    = tf.amount 
			tffact.surcharge = 0.0
			tffact.interest = 0.0
			tffact.discount = 0.0
			tffact.monthsfromjan = calculateNoOfMonthsFromJan( cyfact, tf.year, tf.qtr )
			tffact.monthsfromqtr = calculateNoOfMonthsFromQtr( cyfact, tf.year, tf.qtr )
			tffact.daysfromjan = calculateNoOfDaysFromJan( cyfact, tf.year, tf.qtr )
			tffact.daysfromqtr = calculateNoOfDaysFromQtr( cyfact, tf.year, tf.qtr )
			tffact.applysurcharge = false 
			
			def lob = bill.lobs.find{ it.lobid == tf.lobid }
			
			tffact.assessmenttype = bill.txntype 
			if(lob ) {
				tffact.assessmenttype = lob.assessmenttype
			}
			
			if( lob && lob.assessmenttype != 'NEW' ) {
				tffact.applysurcharge = isApplySurcharge( cyfact, tf.year, tf.qtr )
			}
			else if( bill.txntype != 'NEW' ) {
				tffact.applysurcharge = isApplySurcharge( cyfact, tf.year, tf.qtr )
			}
			
			tffact.applydiscount = isApplyDiscount( cyfact, tf.year, tf.qtr )
			facts += tffact
			
		}
		return facts 
	}
	
	void buildActionCommands( bill, facts, actionList ) {
		actionList.addCommand( 'calcSurcharge', new CalcSurchargeHandler( em:em, bill:bill ) )		
		actionList.addCommand( 'calcInterest', new CalcInterestHandler( em:em, bill:bill ) )	
		actionList.addCommand( 'calcDiscount', new CalcDiscountHandler( em:em, bill:bill ) )	
	}
	
	int calculateNoOfMonthsFromQtr(currentFact, year, qtr) {
		int currYear = currentFact.year
		int currMonth = currentFact.month
		if(year < currYear) {
			return ((currYear - year) * 12 - (3 * (qtr-1))) + currMonth 
		}
		else {
			int nm = currMonth - (3 * (qtr-1))
			return nm < 0 ? 0 : nm
		}
	}

	int calculateNoOfMonthsFromJan(currentFact, year, qtr) {
		int currYear = currentFact.year
		int currMonth = currentFact.month
		if(year < currYear) {
			return ( currYear - year ) * 12 + currMonth
		}
		else {
			return currMonth
		}
	}
	
	int calculateNoOfDaysFromJan( currentFact, year, qtr ) {
		if ( qtr > currentFact.qtr && year == currentFact.year )
			return 0;
		def cal = Calendar.instance;
		cal.set( Calendar.MONTH, currentFact.month - 1 );
		cal.set( Calendar.DATE, currentFact.day );
		cal.set( Calendar.YEAR, currentFact.year );
		
		def dayCount = cal.get( Calendar.DAY_OF_YEAR );
		
		return dayCount;
	}
	
	int calculateNoOfDaysFromQtr( currentFact, year, qtr ) {
		def cal = Calendar.instance;
		cal.set( Calendar.MONTH, (qtr - 1) * 3 );
		cal.set( Calendar.YEAR, currentFact.year );
		cal.set( Calendar.DATE, 1 );
		def dayCount = cal.get( Calendar.DAY_OF_YEAR );
		
		if ( qtr > currentFact.qtr && year == currentFact.year )
			return 0;
		
		cal.set( Calendar.MONTH, currentFact.month - 1 );
		cal.set( Calendar.DATE, currentFact.day );
		dayCount = cal.get( Calendar.DAY_OF_YEAR ) - dayCount + 1;
		
		def tempYear = year;
		while ( tempYear < currentFact.year ) {
			cal.set( Calendar.MONTH, 11 );
			cal.set( Calendar.YEAR, tempYear );
			cal.set( Calendar.DATE, 31 );
			dayCount += cal.get( Calendar.DAY_OF_YEAR );
			tempYear++;
		}
		return dayCount;
	}
	
	
	boolean isApplySurcharge( currentFact, year, qtr ) {
		if ( year < currentFact.year ) return true;
		if( qtr < currentFact.qtr ) return true;
		if( qtr > currentFact.qtr ) return false;
			
		String d = currentFact.year  + "-" + "${currentFact.month}".toString().padLeft(2, '0') + "-" + "${currentFact.day}".toString().padLeft(2,'0')  
		def date = 	java.sql.Date.valueOf(d);
		def duedate =  getNextBillDate(date);
		if( duedate.expirytype == 'INTEREST' ) return true;
		
		return ( duedate.expirytype == 'SURCHARGE' && date.after(duedate.expirydate) ) 
	}
	
	
	boolean isApplyDiscount( currentFact, year, qtr ) {
		String d = currentFact.year  + "-" + "${currentFact.month}".toString().padLeft(2, '0') + "-" + "${currentFact.day}".toString().padLeft(2,'0')  
		def discountdue = getNextBillDate(java.sql.Date.valueOf(d));
		return (discountdue.expirytype == 'DISCOUNT');
		
	}
	
}	

class CalcSurchargeHandler implements RuleActionHandler 
{
	def em
	def bill 
	def ruleService
	
	public void execute( drools, taxfee) {	
		updateSurcharge( taxfee )
	}
	
	void updateSurcharge( taxfee) {
		def tf = bill.taxfees.find{ it.objid == taxfee.taxfeeid }
		tf.surcharge = 0.0
		if( taxfee ) {
			tf.surchargeacctid = taxfee.surchargeacctid
			tf.surchargeaccttitle = taxfee.surchargeaccttitle
			tf.surchargetaxfeeid = taxfee.taxfeeid
			tf.surcharge = taxfee.surcharge 
		}
		
	}
}

class CalcInterestHandler implements RuleActionHandler 
{
	def em
	def bill 
	def ruleService
	
	public void execute( drools, taxfee) {	
		updateInterest( taxfee )
		//drools.update( taxfee )
	}
	
	void updateInterest( taxfee ) {
		def tf = bill.taxfees.find{ it.objid == taxfee.taxfeeid }
		tf.interest = 0.0
		if( taxfee ) {
			tf.interestacctid = taxfee.interestacctid
			tf.interestaccttitle = taxfee.interestaccttitle
			tf.interesttaxfeeid = taxfee.taxfeeid
			tf.interest = taxfee.interest
		}
	}
}

class CalcDiscountHandler implements RuleActionHandler 
{
	def em
	def bill 
	def ruleService
	
	public void execute( drools, taxfee) {	
		updateDiscount( taxfee )
	}
	
	void updateDiscount( taxfee) {
		def tf = bill.taxfees.find{ it.objid == taxfee.taxfeeid }
		tf.discount = 0.0
		if( taxfee ) {
			tf.discount = taxfee.discount
		}
	}
}

class Util
{

	def ruleService 
	
	public def evaluate( expr, params ) {
		return (new GroovyShell( new Binding( params) )).evaluate( expr )
	}
	
	public def resolveIIF( expr ) {
		def pattern = ~/@IIF\(.+\)/
		def matcher = pattern.matcher( expr )
		while( matcher ) {
			def match = matcher[0]
			def iif = match.replaceFirst('@IIF','').replaceFirst(',', ' ? ').reverse().replaceFirst(',', ':').reverse()
			expr = expr.replaceFirst(pattern.pattern(), iif)
			matcher = pattern.matcher( expr )
		} 
		return expr
	}
	
	public def resolveFixed( expr ) {
		def pattern = ~/@FIXED\(.+\)/
		def matcher = pattern.matcher( expr )
		while( matcher ) {
			def match = matcher[0]
			def fixed = match.replaceFirst('@FIXED','(int)')
			expr = expr.replaceFirst(pattern.pattern(), fixed)
			matcher = pattern.matcher( expr )
		} 
		return expr
		
	}

}