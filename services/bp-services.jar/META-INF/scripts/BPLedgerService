import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import java.text.DecimalFormat;

class BPLedgerService {

	@Service("DateService")
	def dateService;
	
	@Service('NumberService')
	def numberSvc 
	
	@PersistenceContext('main')
	def em;
	
	@Service("BPBillingService")
	def bpbillingsvc;
	
	def dcf = new DecimalFormat("#,##0.00");
	
	def BP_RECIVABLE_SCHAMENAME = 'bpledger:bpreceivable';
	def BP_RECIVABLE_CREDIT_SCHAMENAME = 'bpledger:bpreceivablecredit';
	
	@ProxyMethod
	public def openLedger( ledger ) {
		ledger.items = getBusinessLedgers( ledger.businessid );
		ledger.balance = 0.0;
		ledger.lastyrpaid = 0;
		ledger.lastqtrpaid = 0;
		for ( item in ledger.items ) {
			ledger.balance += item.amount - item.amtpaid;
		}
		def lastpaymentinfo = em.sqlContext.createNamedQuery( "bpledger:getBPLastPaymentInfo" ).setParameters( [businessid:ledger.businessid] ).singleResult;
		ledger.lastyrpaid = lastpaymentinfo.lastyrpaid;
		ledger.lastqtrpaid = lastpaymentinfo.lastqtrpaid;
		ledger.formattedbalance = dcf.format( ledger.balance );
		
		return ledger;
	}
	
	private def getPrevQtr( currQtr ) {
		if ( currQtr == 1 )
			return 4;
		return currQtr - 1;
	}
	
	private def getBusinessLedgers( businessid ) {
		return em.sqlContext.createNamedQuery( "bpledger:getBusinessLedgers" ).setParameters( [businessid:businessid] ).resultList;
	}
	
	private def getBPReceivablesByAppId( appid ) {
		return em.sqlContext.createNamedQuery( "bpledger:getBPReceivablesByAppId" ).setParameters( [appid:appid] ).resultList;
	}
	
	@ProxyMethod
	public def buildCapturePayment( payment ) {
		payment.total = 0.0;
		payment.reftype = 'OFFLINE';
		payment.formattedtotal = dcf.format( payment.total );
		payment.items = [];
		
		def app = em.read('bpapplication:bpapplication', [objid:payment.applicationid]);
		def bp = em.read( 'business:business', [objid:payment.businessid] )
		if( !app.payments ) app.payments = [];
		if( app.payments.find{ it.refno == payment.refno } )
			throw new Exception("Payment reference number already exist.");
		
		if( !bp ) throw new Exception("Business with objid $app.tradename no longer exists.");
		def billdate = dateService.parseDate( java.sql.Date.valueOf( payment.refdate ), null )
		
		def bill = [ 
			capturepayment	: true,
			billdate		: billdate, 
			ledgerid		: payment.businessid,
			yearstarted		: bp.yearstarted,
			lastyearpaid	: bp.lastyearpaid,
			lastqtrpaid		: bp.lastqtrpaid,
			lobs			: app.lobs,
			txntype			: app.txntype,
		]
		
		def receivables = em.sqlContext.createNamedQuery('bpledger:getUnpaidReceivablesByBusinessid')
							.setParameter('businessid', bp.objid)
							.resultList.findAll { 
									if (it.iyear < billdate.year ) 
										return true 
									return it.iyear == billdate.year && it.iqtr <= payment.qtr  
							 }
		
		if( !receivables ) throw new Exception("There are no receivable(s) for the Qtr $payment.qtr");
		
		bill.taxfees = receivables;
		bill = bpbillingsvc.buildBill( bill )
		bill.taxfees.each{ txf ->
			def acct = em.read( "incomeacct:incomeacct", [objid: txf.acctid] )
			txf.surcharge = new BigDecimal( numberSvc.round( txf.surcharge ? txf.surcharge : 0.0 ) )
			txf.interest = new BigDecimal( numberSvc.round( txf.interest ? txf.interest : 0.0 ) )
			txf.discount = new BigDecimal( numberSvc.round( txf.discount ? txf.discount : 0.0 ) )
			txf.taxamount = new BigDecimal( numberSvc.round( txf.amount ) )
			txf.amount = new BigDecimal( numberSvc.round( txf.amount + txf.surcharge + txf.interest - txf.discount ) )
			
			payment.items << [
				bpreceivableid		: txf.objid,
				iyear				: txf.iyear, 
				iqtr				: txf.iqtr, 
				lobname				: txf.lobname,
				acctid				: acct.objid, 
				acctno				: acct.acctno,
				accttitle			: acct.accttitle,
				fundid				: acct.fundid,
				fundname			: acct.fundname,
				taxamount			: txf.taxamount,
				surcharge			: txf.surcharge,
				interest			: txf.interest,
				discount			: txf.discount,
				amount				: txf.amount,
				amtpaid				: txf.amount, 
			]
		}
		
		payment.items.sort{ a, b ->
					def sA = a.iyear+''+a.iqtr + (a.lobname ? '2-' + a.lobname :'1-a' ) 
					def sB = b.iyear+''+b.iqtr + (b.lobname ? '2-' + b.lobname :'1-a' ) 
					return sA<=>sB 
			}
		return payment
	}
	
	@ProxyMethod
	public def postCapturePayment( payment ) {
		validateCapturePayment( payment );
		def items = [];

		for ( item in payment.items ) {
			item.amtpaid = numberSvc.round( item.amtpaid )
			item.surcharge = numberSvc.round( item.surcharge )
			item.interest = numberSvc.round( item.interest )
			item.discount = numberSvc.round( item.discount )
			def amtpaid = ( item.amtpaid + item.surcharge + item.interest ) - item.discount
			
			if (item.amtpaid > 0) {
					items << [  bpreceivableid	: item.bpreceivableid, 
								taxamount		: item.amount,
								surcharge		: item.surcharge,
								interest		: item.interest,
								discount		: item.discount,
								totalamount		: amtpaid
							  ]
			}
		}
	
		def p = [:];
		p.reftype = 'CAPTURE';
		p.putAll( payment );
		p.items = items;
		postPayment( p );
		
		return payment;
	}
	
	private void validateCapturePayment( payment ) {
		if ( numberSvc.round( payment.amtpaid ) != numberSvc.round( payment.total)  )
			throw new IllegalStateException( "Total must be equal to Amount Paid." );
	}
	
	private def buildApplicationPayments( application, payment, business  ) {
		def paymentamount = 0.0;
		def credit = [:]
		for( c in payment.items ){
			def bpr = application.receivables.find{ it.objid == c.bpreceivableid };
			if( bpr ) {
				credit = [
					objid : 'BPRCT' + new UID(), 
					bpreceivableid: c.bpreceivableid,
					refid	: payment.refid,
					reftype		: payment.reftype,
					refno			: payment.refno,
					refdate		: payment.refdate,
					amount			: numberSvc.round( c.taxamount ),
					surcharge		: numberSvc.round( c.surcharge ),
					interest		: numberSvc.round( c.interest ),
					discount		: numberSvc.round( c.discount ),
					totalamount	: numberSvc.round( c.totalamount )
				]
				
				if( !bpr.amtpaid ) bpr.amtpaid = 0.0;
				bpr.amtpaid += numberSvc.round( c.taxamount )
				paymentamount += numberSvc.round( c.totalamount )
				
				em.validate( BP_RECIVABLE_CREDIT_SCHAMENAME, credit); 
				em.create( BP_RECIVABLE_CREDIT_SCHAMENAME, credit);
				em.update( BP_RECIVABLE_SCHAMENAME, bpr )
			}  
		}
		
		if(! application.payments) application.payments = [];
		
		def prep = application.payments.find{ it.tail == null };
		if( prep ) prep.tail = payment.refno;
		
		application.payments << [ refno: payment.refno, 
						  refid: payment.refid, 
						  reftype: payment.reftype,
						  refdate: payment.refdate, 
						  qtr: payment.qtr, 
						  year:payment.year,
						  lastyearpaid: business.lastyearpaid,
						  lastqtrpaid: business.lastqtrpaid,
						  amount: paymentamount,
						  head: prep?.refno];
		
		def bplisting = em.read('bplisting:bpapplicationlisting', [objid: application.objid]);
		def unpaidReceivables = application.receivables.findAll{ it.amount > it.amtpaid }
		if( application.txntype == 'RENEW' ) {
			bplisting.fullypaid = ( unpaidReceivables.size() == 0 ? 1 : 0 )
			if( application.docstate != 'LATE_RENEWAL') {
				if( isApplicationStatusForPermit( application ) ){
					if( !application.docstate.equals('EXPIRED') ){
						if( !application.docstate.equals('ACTIVE') ){
							application.docstate = 'PERMIT_PENDING'
						}
					}
				}
				else{
					application.docstate = 'APPROVED';
				}
			}
		}
		else if( ! unpaidReceivables && application.docstate != 'EXPIRED'){
			bplisting.fullypaid = 1
			application.docstate = 'CLOSED' // applied for RETIRE, RETIRELOB 
			if( application.txntype == 'NEW' || application.txntype == 'ADDLOB') {
				application.docstate = 'PERMIT_PENDING'
			}
		}
		
		bplisting.docstate = application.docstate 
		em.update( 'bplisting:bpapplicationlisting',  bplisting );
		return application;
	}
	
	@ProxyMethod
	public void postPayment( def payment ){
		def application = em.read('bpapplication:bpapplication', [objid: payment.applicationid]);
		if( !application.payments ) application.payments = [];
		if( application.payments.find{ it.refno == payment.refno } )
			throw new Exception("Payment reference number already exist.");
		
		if( !application ) throw new Exception("Application is no longer exist.");
		
		def business = em.read('business:business', [objid: application.businessid]);
	
		
		if( application.docstate != 'LATE_RENEWAL') {
			//paid first the late renewal 
			def applist = em.sqlContext.createNamedQuery('bpapplication:getApplicationByParentId')
				.setParameters([parentid: application.parentid])
				.resultList.each{ app -> 
					app.info = em.serializer.read( app.info );
					app.lobs = em.serializer.read( app.lobs );
					app.extended  = em.serializer.read( app.extended );
					app.taxfees  = em.serializer.read( app.taxfees );
					app.appinfos = em.serializer.read( app.appinfos );
					app.receivables = em.sqlContext.createNamedQuery('bpledger:getUnpaidReceivables')
										.setParameter('applicationid', app.objid)
										.resultList
					
					em.update( 'bpapplication:bpapplication', buildApplicationPayments( app, payment, business)  );
				}
		}

		application.receivables = em.sqlContext.createNamedQuery('bpledger:getUnpaidReceivables')
										.setParameter('applicationid', application.objid)
										.resultList
		application = buildApplicationPayments( application, payment, business ) 
		application.lastmodified = dateService.serverDate.time
		em.update( 'bpapplication:bpapplication', application  );
		
		business.lastqtrpaid = payment.qtr;
		business.lastyearpaid = payment.year;
		em.update( 'business:business', business );
		
	}
	
	@ProxyMethod
	public void updatePayment( def payment ){
		deletePayment( payment );
		postPayment( payment );
	}
	
	@ProxyMethod
	public void deleteCapturePayment( def payment ){
		/*if( payment.reftype != 'CAPTURE' ){
			throw new Exception('Only CAPTURE type payment can be remove.');
		*/
		deletePayment( payment );
	}
	
	private void validateRefNo( def payment, def application ){
		if( !application.credits.last().refno.equals( payment.refno ) )     
			throw new Exception("Unable to process this transaction.\nThis is referred by another payment transaction.");
	}
	
	private def getPayments( def application , def payment ){
		if( !application.payments ) application.payments = [];
		def payments = application.payments.find{ it.refno == payment.refno };
		if( !payments ) throw new Exception("Unable to find payment with reference number $payment.refno.");
		
		return payments
	}
	
	private def removePayments( def application, def pmt ){
		em.sqlContext.createNamedExecutor('bpledger:deleteReceivableCredits').setParameters( pmt ).execute();
		application.payments.remove( pmt );   
		
		return application
	}
	
	private void updateAppListing( def application, def bplisting ){
		if( bplisting && ( !bplisting.fullypaid || bplisting.fullypaid == 1 ) )
			bplisting.fullypaid = 0
		def unpaidReceivables = application.receivables.findAll{ it.amtpaid == it.amount }
		if( !unpaidReceivables ){
			if( application.docstate.equals('PERMIT_PENDING') ) application.docstate = 'APPROVED';
			if( bplisting.docstate.equals('PERMIT_PENDING') ) bplisting.docstate = 'APPROVED'
		} 
		
		em.update( 'bpapplication:bpapplication', application );
		em.update( 'bplisting:bplisting', bplisting );
	}
	
	private void validateDeleteReceipt( def application, payment ){
		def appRefno = application.payments[0].refno
		if( !application ) throw new Exception('Application reference is no longer exist.');
		if( appRefno.equals( payment.refno ) && application.docstate.matches('ACTIVE') )
			throw new Exception("Unable to process transaction.\nApplication Permit/Reference status is already $application.docstate.");
		
	}
	
	@ProxyMethod
	public void deletePayment( def payment ){
		def application = em.read('bpapplication:bpapplication', [objid: payment.applicationid]);
		def bplisting = em.read('bplisting:bpapplicationlisting', [objid: application.objid]);
		validateDeleteReceipt( application, payment )
		def pmt = getPayments( application, payment )
		validateRefNo( payment, application )
		//if( p.tail != null ) throw new Exception("Unable to process this transaction.\nThis is referred by another payment transaction.");
				
		def business = em.read('business:business', [objid: application.businessid]);
		business.lastqtrpaid = pmt.qtr;
		business.lastyearpaid = pmt.year;
		
		application = removePayments( application, pmt )
		updateAppListing( application, bplisting )
	}
	
	def isApplicationStatusForPermit( application ){
		def qtr = dateService.serverQtr;
		def getUnpaidReceivables = { 
			def list = application.receivables.findAll{ it.amount > it.amtpaid };
			if( application.txntype.matches('NEW|ADDLOB') ) return list;
			return list.findAll{ it.iqtr == 1 }
		}
		
		def taxfees = getUnpaidReceivables();
		return taxfees.size() == 0 
	}
	
	@ProxyMethod
	public def getApplicationByBusiness( def businessid ){
		return em.sqlContext.createNamedQuery('business:getApplicationListByBusinessId')
			 .setParameters([businessid: businessid])
			 .resultList.each{ app ->
				app.surcharge_paid = 0.00
				app.interest_paid = 0.00
				app.amount = 0.0
				app.amtpaid = 0.0 
				
				app.taxfees = em.serializer.read( app.taxfees );
				app.lobs = em.serializer.read( app.lobs );
				app.receivables = em.sqlContext.createNamedQuery('bpledger:getReceivablesByApplicationId')
									.setParameter('applicationid', app.objid)
									.resultList.each {
										app.amount += it.amount
										app.amtpaid += it.amtpaid
									}				
									
				app.credits = em.sqlContext.createNamedQuery('bpledger:getReceivableCreditsByApplicationid')
								.setParameter('applicationid', app.objid)
								.resultList.each{
										app.surcharge_paid += it.surcharge
										app.interest_paid += it.interest
								}
				
				
				if( app.extended ) {
					app.putAll( em.serializer.read( app.extended ) );
				}				
				
				
			 };
	}	
	
	@ProxyMethod     
	public def getBPLedgerData( businessid ){
		def bpledger = [ ledgeritems:[] ]
		em.sqlContext.createNamedQuery('business:getApplicationListByBusinessId')
			 .setParameters([businessid: businessid])
			 .resultList.each{ bapp ->
				bapp.surcharge_paid = 0.0
				bapp.interest_paid = 0.0
				bapp.discount_paid = 0.0
				bapp.amount = 0.0
				bapp.amtpaid = 0.0 
				
				bapp.lobs = em.serializer.read( bapp.lobs )
				bapp.credits = []
				bapp.receivables = em.sqlContext.createNamedQuery('bpledger:getReceivablesByApplicationId')
									.setParameter('applicationid', bapp.objid)
									.resultList.each{
										bapp.amount += it.amount
										bapp.amtpaid += it.amtpaid
									
										it.credits = em.sqlContext.createNamedQuery('bpledger:getReceivableCredits')
														.setParameter('receivableid', it.objid)
														.resultList
														
										if( it.credits){
											bapp.credits.addAll( it.credits )
											bapp.surcharge_paid += it.credits.surcharge.sum()		
											bapp.interest_paid += it.credits.interest.sum()
											bapp.discount_paid += it.credits.discount.sum()
										}
									}
							 
				bpledger.ledgeritems << [
					iyear 	: bapp.iyear,
					txnno   : bapp.txnno,
					txntype : bapp.txntype,
					txnmode : bapp.txnmode,
					amount 	: bapp.amount, 
					amtpaid : bapp.amtpaid,
					surcharge : bapp.surcharge_paid,
					interest  : bapp.interest_paid,
					discount  : bapp.discount_paid,
					docstate  : bapp.docstate.replaceAll( '_', ' ' ),
					
					lobs 	: bapp.lobs, 
					credits : bapp.credits,
					receivables : bapp.receivables,
				]
			}
			 
			 return bpledger
		
	}
	
}
