import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID

class BPCollectionService{
	
	@Service("BPApplicationReportService")
	def appSvc;
	
	@Service("BPBillingService")
	
	def billingSvc;
	
	@PersistenceContext('main')
	def em;
	
	@Service('DateService')
	def dateService;
	
	@Service('NumberService')
	def numSvc;
	
	@ProxyMethod
	public def getBill( def entity, year, qtr ){
		entity.year = (year == 0) ? Integer.parseInt(new java.text.SimpleDateFormat("yyyy").format( dateService.serverDate )) : year;
		entity.qtr = (qtr == 0) ? 4 : qtr;
		
		def app = em.read('bpapplication:bpapplication', [objid:entity.applicationid])
		if( !app ) throw new Exception("Application with objid $entity.applicationid no longer exists.");
		def bp = em.read('business:business', [objid: app.businessid]);
		if( !bp ) throw new Exception("Business with objid $app.businessid no longer exists.");
		def permit = em.sqlContext.createNamedQuery('business:getBPPermitByBusinessid')
						.setParameter('businessid', bp.objid) 
						.singleResult
		
		def bill = [
			ledgerid      : bp.objid,
			yearstarted   : bp.yearstarted,
			lastyearpaid  : bp.lastyearpaid,
			lastqtrpaid   : bp.lastqtrpaid,
			lobs		  : app.lobs,
			txntype		  : app.txntype, 
			plateno 	  : permit ? permit.plateno : null 
		];
		
		 bill.taxfees =  em.sqlContext.createNamedQuery('bpledger:getUnpaidReceivables')
							.setParameter('applicationid', entity.applicationid)
							.resultList.findAll { 
									if (it.iyear < entity.year ) 
										return true 
									return it.iyear == entity.year && it.iqtr <= entity.qtr  
							 }
		
		
		bill = billingSvc.buildBill( bill ); 
		if( !bill.taxfees && entity.qtr == 4 ) throw new Exception( "Business is fully paid." );
		if( !bill.taxfees ) throw new Exception("Business is already paid for quarter " + entity.qtr + '.');
		
		entity.businessid = bp.objid;
		entity.tradename = bp.tradename;
		entity.businessaddress = bp.businessaddress;
		entity.info.payorname = bp.taxpayername;
		entity.info.payoraddress = bp.taxpayeraddress;
		entity.info.paidby = bp.taxpayername;
		entity.info.paidbyaddress = bp.taxpayeraddress;
		entity.info.txndate = dateService.serverDate;
		entity.info.amount = 0.0;
		entity.items = [];
		entity._items = []
		
		def populatePenaltyInfo = { tf, item ->
			if( tf.surcharge > 0.0 ){
				item.surchargetaxfeeid = tf.surchargetaxfeeid
				item.surchargeacctid = tf.surchargeacctid
			}
			if( tf.interest > 0.0 ){
				item.interesttaxfeeid = tf.interesttaxfeeid
				item.interestacctid = tf.interestacctid
			}
		}
		
		bill.taxfees.each{
			//create summarized main account item 
			def acct = em.read("incomeacct:incomeacct", [objid: it.acctid]);
			def item = createItem( it.objid, it, acct, it.amount, it.surcharge, it.interest, it.discount )
			populatePenaltyInfo( it, item )
			def totalamount = item.taxamount + item.surcharge + item.interest - item.discount
			item.amount = numSvc.round( totalamount )
			entity._items << item
			
			//create main account 
			item = createItem( it.objid, it, acct, it.amount, 0.0, 0.0, it.discount )
			item.amount = numSvc.round( item.taxamount - item.discount )
			
			//create sucharge account if collected
			def surchargeAcct = null
			def surchargeItem = null 
			if( it.surcharge > 0.0 ){
				surchargeAcct = em.read("incomeacct:incomeacct", [objid: it.surchargeacctid]);
				surchargeItem =  createItem( it.surchargetaxfeeid, it, surchargeAcct, it.surcharge, 0.0, 0.0, 0.0 )
			}
			
			//create interest account if collected 
			def interestAcct = null
			def interestItem = null 
			if( it.interest > 0.0 ){
				interestAcct = em.read("incomeacct:incomeacct", [objid: it.interestacctid]);
				interestItem =  createItem( it.interesttaxfeeid, it, interestAcct, it.interest, 0.0, 0.0, 0.0 )
			}
			
			//collect account
			entity.items << item
			if( surchargeItem ) entity.items << surchargeItem
			if( interestItem ) entity.items << interestItem
		}
	
		entity.info.amount = numSvc.round( entity._items.amount.sum() ) 
		entity.applicationlastmodified = app.lastmodified;
		entity._items.sort { a, b ->
			def sA = a.iyear+''+a.iqtr
			def sB = b.iyear+''+b.iqtr
			return sA<=>sB 
		}
		
    	return entity;
	}
	
	def createItem( objid, taxfee, acct, amount, surcharge, interest, discount ) {
		return [
			taxfeeid	: objid,
			iyear		: taxfee.year, 
			iqtr		: taxfee.qtr,  
			lobid		: taxfee.lobid,
			lobname		: taxfee.lobname,
			acctid		: acct.objid, 
			acctno		: acct.acctno,
			accttitle	: acct.accttitle,
			systype 	: acct.systype,
			fundid		: acct.fundid,
			fundname	: acct.fundname,
			surcharge	: numSvc.round(surcharge ? surcharge : 0.0),
			discount	: numSvc.round(discount  ? discount  : 0.0),
			interest	: numSvc.round(interest  ? interest  : 0.0) ,
			taxamount	: numSvc.round(amount) ,
			amount 		: numSvc.round(amount),		
		]
	}

	@ProxyMethod 
	public def doComputePartial( entity , partialpmt ){
		def items = [];
		entity._items.each{
			
			it.surcharge = ( it.surcharge ? it.surcharge : 0.0 )
			it.interest  = ( it.interest  ? it.interest  : 0.0 )
			it.discount  = ( it.discount  ? it.discount  : 0.0 )
			it.partial   = 0
			
			if( partialpmt == 0 )
				it.amount = partialpmt 
			if( partialpmt >= it.amount )
				partialpmt -= numSvc.round( it.taxamount + it.surcharge + it.interest - it.discount )
			else{ 
				it.partial = 1
				it.taxamount = numSvc.round( it.taxamount / it.amount * partialpmt )
				if( it.surcharge > 0.0 ) {
					it.surcharge = numSvc.round( it.surcharge / it.amount * partialpmt )
				}
				//routine tomake ( it.taxamount + it.surcharge + it.interest ) equal to partialpmt
				if( it.interest > 0.0 ) {
					it.interest = numSvc.round( partialpmt - it.taxamount - it.surcharge )
				}
				if( it.discount > 0.0 ) it.discount = numSvc.round( it.discount / it.amount * partialpmt )
				
				it.amount = numSvc.round( it.taxamount + it.surcharge + it.interest - it.discount )
				partialpmt -= it.amount 
			}
			
			if( it.surcharge > 0.0 ) {
				def surchargeAcct = em.read("incomeacct:incomeacct", [objid: it.surchargeacctid]);
				items << createItem( it.surchargetaxfeeid, it, surchargeAcct, it.surcharge, 0.0, 0.0, 0.0 )
				println it.surcharge
			}
			
			if( it.interest > 0.0 ) {
				def interestAcct = em.read("incomeacct:incomeacct", [objid: it.interestacctid]);
				items << createItem( it.interesttaxfeeid, it, interestAcct, it.interest, 0.0, 0.0, 0.0 )
				println it.interest
			}
			
			if( it.amount > 0.0 ) {
				def item = [:]
				item.putAll( it )
				println item.amount
				item.amount = (item.amount - item.surcharge - item.interest + item.discount )
				println item.amount
				items << item
			}
			
		}
		entity._items.sort { a, b ->
			def sA = a.iyear+''+a.iqtr;
			def sB = b.iyear+''+b.iqtr;
			return sA<=>sB;
		}
		entity._items.findAll{ it.amount > 0.0 }
		entity.items = items
		return entity 
	}
} 